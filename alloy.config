 // pgo metrics
discovery.kubernetes "pgo_metrics_pods" {
  role = "pod"
  selectors {
    role  = "pod"
    label = "postgres-operator.crunchydata.com/control-plane"
  }
}

discovery.relabel "pgo_metrics_targets" {
  targets = discovery.kubernetes.pgo_metrics_pods.targets
  // No relabel rules were defined in the original job; SD-only is preserved.
}

prometheus.scrape "pgo_metrics" {
  job_name        = "pgo-metrics"
  targets         = discovery.relabel.pgo_metrics_targets.output
  scheme          = "https"
  scrape_interval = "15s"
  scrape_timeout  = "15s"

  authorization {
    type             = "Bearer"
    credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  }
  tls_config {
    insecure_skip_verify = true
  }
  // forward_to = [prometheus.remote_write.default.receiver]
}


// crunchy-postgres-exporter

discovery.kubernetes "crunchy_pgexp_pods" {
  role = "pod"
  selectors {
    role  = "pod"
    label = "postgres-operator.crunchydata.com/crunchy-postgres-exporter=true"
  }
}

discovery.relabel "crunchy_pgexp_targets" {
  targets = discovery.kubernetes.crunchy_pgexp_pods.targets

  // Keep exporter port and drop all others
  rule {
    action        = "keep"
    source_labels = ["__meta_kubernetes_pod_container_port_number"]
    regex         = "9187"
  }

  // Set label for namespace
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "kubernetes_namespace"
  }

  // Set label for pod name
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label  = "pod"
  }

  // pg_cluster = namespace:cluster
  rule {
    source_labels = ["__meta_kubernetes_namespace","__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_cluster"]
    target_label  = "pg_cluster"
    separator     = ":"
    replacement   = "$1$2"
  }

  // ip = pod IP
  rule {
    source_labels = ["__meta_kubernetes_pod_ip"]
    target_label  = "ip"
  }

  // deployment from instance label
  rule {
    source_labels = ["__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_instance"]
    target_label  = "deployment"
  }

  // role
  rule {
    source_labels = ["__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_role"]
    target_label  = "role"
  }
}

prometheus.scrape "crunchy_pgexp" {
  job_name        = "crunchy-postgres-exporter"
  targets         = discovery.relabel.crunchy_pgexp_targets.output
  scrape_interval = "15s"
  scrape_timeout  = "15s"
  // forward_to = [prometheus.remote_write.default.receiver]
}

// crunchy-otel-collector
discovery.kubernetes "crunchy_otel_pods" {
  role = "pod"
  selectors {
    role  = "pod"
    label = "postgres-operator.crunchydata.com/crunchy-otel-collector=true"
  }
}

discovery.relabel "crunchy_otel_targets" {
  targets = discovery.kubernetes.crunchy_otel_pods.targets

  // Keep exporter port and drop all others
  rule {
    action        = "keep"
    source_labels = ["__meta_kubernetes_pod_container_port_number"]
    regex         = "9187"
  }

  // Set label for namespace
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "kubernetes_namespace"
  }

  // Set label for pod name
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label  = "pod"
  }

  // pg_cluster = namespace:cluster
  rule {
    source_labels = ["__meta_kubernetes_namespace","__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_cluster"]
    target_label  = "pg_cluster"
    separator     = ":"
    replacement   = "$1$2"
  }

  // ip = pod IP
  rule {
    source_labels = ["__meta_kubernetes_pod_ip"]
    target_label  = "ip"
  }

  // deployment from instance label
  rule {
    source_labels = ["__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_instance"]
    target_label  = "deployment"
  }

  // role
  rule {
    source_labels = ["__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_role"]
    target_label  = "role"
  }

  // exp_type = role (pgBouncer dashboards)
  rule {
    source_labels = ["__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_role"]
    target_label  = "exp_type"
  }

  // cluster_name = namespace:cluster
  rule {
    source_labels = ["__meta_kubernetes_namespace","__meta_kubernetes_pod_label_postgres_operator_crunchydata_com_cluster"]
    target_label  = "cluster_name"
    separator     = ":"
    replacement   = "$1$2"
  }
}

prometheus.scrape "crunchy_otel" {
  job_name        = "crunchy-otel-collector"
  targets         = discovery.relabel.crunchy_otel_targets.output
  scrape_interval = "15s"
  scrape_timeout  = "15s"
  // forward_to = [prometheus.remote_write.default.receiver]
}
